{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/gifGrid.js","hooks/useFetchGif.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","className","value","onChange","target","getsGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGif","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGXC,mBAAS,IAHE,mBAGvCC,EAHuC,KAG3BC,EAH2B,KAwB9C,OAGE,aADA,CACA,QAAQC,SAjBW,SAACC,GAEpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEvCN,EAAc,MAShB,SAEE,uBAAOO,KAAK,OACZC,UAAU,QACVC,MAAOV,EACPW,SA3BgB,SAACR,GAEjBF,EAAeE,EAAES,OAAOF,a,+BCXjBG,EAAQ,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEdC,EAFc,iDAEqCC,UAAUH,GAF/C,+DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXtB,kBAebM,GAfa,4CAAH,sDCGRO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBT,EAAiB,EAAjBA,IAAKU,EAAY,EAAZA,MAG/B,OAAS,sBAAKjB,UAAU,2DAAf,UACP,qBAAKqB,IAAKd,EAAKe,IAAKL,IACpB,kCAAMA,EAAN,WCJGM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECId,SAAEA,GAAe,IAAD,EAEff,mBAAS,CACjCsB,KAAK,GACLY,SAAQ,IAJ+B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAsBzC,OAdAC,qBAAW,WACLvB,EAASC,GACRuB,MAAO,SAAAC,GAENC,QAAQC,IAAIF,GAEZH,EAAS,CACLd,KAAMiB,EACNL,SAAQ,SAIjB,CAAEnB,IAEEoB,EDvBiCO,CAAa3B,GAAnCa,EAHqB,EAG3BN,KAH2B,EAGbY,QAMpB,OACE,sBAAKxB,UAAU,GAAf,UACE,mCAAOK,EAAP,OACI,qBAAKL,UAAU,YAAf,SAEIkB,EAAOJ,KAAK,SAACC,GAAD,OAEV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEa7BiB,EA7BM,WAAM,MAGc3C,mBAAS,CAAC,oBAHxB,mBAGhB4C,EAHgB,KAGH7C,EAHG,KASvB,OACE,qCACA,0CAEF,cAAC,EAAD,CAAaA,cAAgBA,IAG7B,6BAEM6C,EAAWpB,KAAK,SAACT,GAAD,OAAc,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,QAGhD,2B,MClBN8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.65f21468.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n// se debe de dejar elstrig vacio\r\n  const [inputValue, setInputValue] =useState('');\r\n\r\n  const handleValue = (e) => {\r\n\r\n      setInputValue( e.target.value );\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    // console.log(e );\r\n    e.preventDefault();\r\n\r\n    if( inputValue.trim().length > 2 ){\r\n            // se previene que se recargue la pagina\r\n      setCategories( cats => [inputValue, ...cats] );\r\n      // recibimso por defecto los valores de la catgoria\r\n      setInputValue('');\r\n      }\r\n\r\n\r\n  }\r\n\r\n  return(\r\n\r\n    // el fargment se quita si hay otro agrupador\r\n    <form   onSubmit={ handleSubmit }  >\r\n\r\n      <input type=\"text\"\r\n      className=\"input\"\r\n      value={inputValue}\r\n      onChange={  handleValue }\r\n      />\r\n      </form>\r\n  )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getsGifs = async(category) => {\r\n\r\n    const url =   `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=eEPDA03j1IvzhS3hAAbeGHhOeE48k0vN`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n// es el return de la promesa\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport const GifGridItem = ( {id, url, title} ) => {\r\n\r\n        // console.log( props );\r\n        return ( <div className=\"card animate__animated animate__bounce animate__delay-5s\"  >\r\n          <img src={url} alt={title} />\r\n          <p> { title } </p>\r\n         </div>)\r\n        }\r\n","import React from 'react';\r\nimport { useFetchGif } from '../hooks/useFetchGif';\r\nimport {GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n      const { data: images, loading }  =  useFetchGif( category );\r\n      // console.log( data );\r\n      // console.log( loading );\r\n\r\n      { loading && <p>loading </p> }\r\n\r\n        return (\r\n          <div className=\"\" >\r\n            <h3> { category } </h3>\r\n                <div className=\"card-grid\" >\r\n                  {\r\n                    images.map( (img) =>(\r\n\r\n                      <GifGridItem key={img.id} {...img} />\r\n                    )\r\n                    )\r\n                  }\r\n                </div>\r\n            </div>)\r\n        }\r\n\r\n        // { loading ? 'Cargando...' : 'Fin de la carga' }\r\n","// los use demuestran que es un hook\r\n// los hooks son funciones\r\n//\r\n\r\nimport  {getsGifs}  from '../helpers/getGifs'\r\nimport { useState, useEffect } from 'react';\r\n\r\n// el hook si puede tener el estado\r\nexport const useFetchGif = ( category ) => {\r\n\r\n  const [state, setState] = useState({\r\n    data:[],\r\n    loading:true\r\n  });\r\n\r\n\r\n  useEffect( ()=> {\r\n        getsGifs(category)\r\n        .then(  imgs => {\r\n\r\n          console.log(imgs);\r\n\r\n          setState({\r\n              data: imgs,\r\n              loading:false\r\n          });\r\n\r\n        })\r\n  }, [ category ]);\r\n\r\n  return state;\r\n}\r\n","import React, { useState } from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport {GifGrid} from './components/gifGrid';\r\n\r\nconst GitExpertApp = () => {\r\n\r\n  // const categories = ;\r\n  const [  categories , setCategories] = useState(['Attack on titan']);\r\n  // const handelAdd = () => {\r\n  //     // console.log(\"Add\");\r\n\r\n  //     // asi se agrega un elemento al arreglo\r\n  // }\r\n    return (\r\n      <>\r\n      <h2> GitApp </h2>\r\n\r\n    <AddCategory setCategories={ setCategories } />\r\n    {/* <button onClick={ handelAdd}  > Agregar </button> */}\r\n      {/*  pasamos la fiuncion por parametro*/}\r\n    <h1>\r\n        {\r\n          categories.map( (category) => <GifGrid key={category} category={category} />  )\r\n        }\r\n      </h1>\r\n      <hr/>\r\n      </>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default GitExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport  GitExpertApp  from './GitExpertApp'\nimport './index.css';\n\n\nReactDOM.render(\n    <GitExpertApp />,\n  document.getElementById('root')\n);\n\n\n//   const apiKey = 'eEPDA03j1IvzhS3hAAbeGHhOeE48k0vN';\n        // const resp   = await fetch(`http://api.giphy.com/v1/gifs/random?api_key=${ apiKey }`);\n"],"sourceRoot":""}